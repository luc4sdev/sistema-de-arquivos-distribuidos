syntax = "proto3";

package filesystem;

service FileSystem {
  // Operações básicas
  rpc CreateFile (CreateFileRequest) returns (FileOperationResponse) {}
  rpc ReadFile (ReadFileRequest) returns (ReadFileResponse) {}
  rpc WriteFile (WriteFileRequest) returns (FileOperationResponse) {}
  rpc DeleteFile (DeleteFileRequest) returns (FileOperationResponse) {}
  
  // Operações avançadas
  rpc ListFiles (ListFilesRequest) returns (ListFilesResponse) {}
  rpc CopyFile (CopyFileRequest) returns (FileOperationResponse) {}
  rpc DownloadFile (DownloadFileRequest) returns (DownloadFileResponse) {}
  rpc UploadFile (stream FileChunk) returns (FileOperationResponse);
}

// Mensagens de requisição
message CreateFileRequest {
  string filename = 1;
  string content = 2;
}

message FileChunk {
    string filename = 1;
    bytes chunk = 2;
    int32 chunk_number = 3;
    int32 total_chunks = 4;
    string checksum = 5;
}

message ReadFileRequest {
  string filename = 1;
}

message WriteFileRequest {
  string filename = 1;
  string content = 2;
}

message DeleteFileRequest {
  string filename = 1;
}

message ListFilesRequest {
  string path = 1;
}

message CopyFileRequest {
  string source = 1;
  string destination = 2;
}

message DownloadFileRequest {
  string path = 1;
  string output_name = 2;
}

// Mensagens de resposta
message FileOperationResponse {
  string status = 1;
  string message = 2;
  int64 time_ms = 3;
}

message ReadFileResponse {
  string status = 1;
  string message = 2;
  string content = 3;
  int64 time_ms = 4;
}

message ListFilesResponse {
  string status = 1;
  string message = 2;
  repeated string files = 3;
  int64 time_ms = 4;
}

message FileInfo {
  string name = 1;
  bool is_directory = 2;
}

message DownloadFileResponse {
  string status = 1;
  string message = 2;
  string filename = 3;
  string content = 4; // Base64 encoded
  int64 time_ms = 5;
}

message SubscriptionRequest {
  string client_id = 1;              // Identificador único do cliente
  repeated string watch_paths = 2;   // Lista de caminhos para monitorar
  optional bool recursive = 3;       // Se deve monitorar subdiretórios
  repeated string event_types = 4;   // Tipos de eventos a filtrar (CREATE, DELETE, etc)
}

message Notification {
  string event_type = 1;  // CREATE, DELETE, UPDATE, RENAME
  string file_path = 2;
  int64 timestamp = 3;
  string additional_info = 4;
  int64 file_size = 5;
  string user_id = 6;
  string original_path = 7;
}